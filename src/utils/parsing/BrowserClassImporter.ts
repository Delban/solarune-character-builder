import type { ClassNWN } from '../../models/ClassNWN';
import { ClassParser } from './ClassParser';

/**
 * Utilitaire pour importer des classes depuis les fichiers texte
 * Cette version est destin√©e √† √™tre utilis√©e manuellement dans le navigateur
 */
export class BrowserClassImporter {
  /**
   * Parse un seul fichier texte et retourne la classe
   */
  static parseClassFromText(content: string, filename: string): ClassNWN | null {
    return ClassParser.parseClassFile(content, filename);
  }

  /**
   * V√©rifie si une classe existe d√©j√† dans la liste
   */
  static classExists(classes: ClassNWN[], classId: string): boolean {
    return classes.some(c => c.id === classId);
  }

  /**
   * Ajoute une nouvelle classe √† la liste si elle n'existe pas d√©j√†
   */
  static addClassIfNotExists(classes: ClassNWN[], newClass: ClassNWN): boolean {
    if (this.classExists(classes, newClass.id)) {
      console.log(`‚è≠Ô∏è  Classe "${newClass.id}" d√©j√† pr√©sente, ignor√©e`);
      return false;
    }
    
    classes.push(newClass);
    console.log(`‚úÖ Classe "${newClass.nom}" (${newClass.id}) ajout√©e avec succ√®s`);
    return true;
  }

  /**
   * G√©n√®re une liste des classes manquantes en comparant avec les fichiers disponibles
   */
  static generateMissingClassesList(existingClasses: ClassNWN[], availableFiles: string[]): string[] {
    const existingIds = new Set(existingClasses.map(c => c.id));
    return availableFiles
      .filter(file => file.endsWith('.txt'))
      .map(file => file.replace('.txt', '').toLowerCase())
      .filter(id => !existingIds.has(id));
  }

  /**
   * Affiche un rapport sur l'√©tat des classes
   */
  static displayReport(existingClasses: ClassNWN[], availableFiles: string[]): void {
    const missing = this.generateMissingClassesList(existingClasses, availableFiles);
    const existing = existingClasses.map(c => c.id).sort();
    
    console.log('\nüìã Rapport des classes:');
    console.log(`   ‚Ä¢ ${existingClasses.length} classes dans la base de donn√©es`);
    console.log(`   ‚Ä¢ ${availableFiles.length} fichiers texte disponibles`);
    console.log(`   ‚Ä¢ ${missing.length} classes √† importer`);
    
    if (missing.length > 0) {
      console.log('\nüÜï Classes √† importer:');
      missing.forEach(id => console.log(`   ‚Ä¢ ${id}`));
    }
    
    console.log('\n‚úÖ Classes d√©j√† pr√©sentes:');
    existing.forEach(id => console.log(`   ‚Ä¢ ${id}`));
  }
}

// Helper pour cr√©er une nouvelle liste de classes tri√©e
export function sortClassesByName(classes: ClassNWN[]): ClassNWN[] {
  return [...classes].sort((a, b) => a.nom.localeCompare(b.nom));
}

// Helper pour exporter la liste en JSON format√©
export function exportClassesToJSON(classes: ClassNWN[]): string {
  return JSON.stringify(sortClassesByName(classes), null, 2);
}
